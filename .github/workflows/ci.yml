name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - "release/**"
  pull_request:
    branches:
      - main

jobs:
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GOOGLE_SERVICE_ACCOUNT_PATH: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_PATH }}
      GOOGLE_SHEET_KEY: ${{ secrets.GOOGLE_SHEET_KEY }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      LOG_LEVEL: DEBUG
      DEBUG: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest

      - name: Lint with flake8
        run: |
          flake8 .

      - name: Run pytest
        env:
          # 테스트 환경 시크릿
          OPENAI_API_KEY: ${{ secrets.TEST_OPENAI_API_KEY }}
          GOOGLE_SERVICE_ACCOUNT_PATH: ${{ secrets.TEST_GOOGLE_SERVICE_ACCOUNT_PATH }}
          GOOGLE_SHEET_KEY: ${{ secrets.TEST_GOOGLE_SHEET_KEY }}
          SLACK_WEBHOOK_URL: ${{ secrets.TEST_SLACK_WEBHOOK_URL }}
          # 테스트용 환경 설정
          LOG_LEVEL: DEBUG
          DEBUG: "true"
        run: |
          # 테스트 환경 변수 파일 활용
          cp .env.test .env
          # 상세한 테스트 결과 출력 (-v), 실패 즉시 중단 (-x)
          pytest test/ -v -x --disable-warnings

  build-and-push:
    name: Build & Push Docker Image
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
    env:
      LOG_LEVEL: INFO
      DEBUG: "false"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build Docker image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}/standard-ai:latest
          docker build -t $IMAGE_NAME .

      - name: Push Docker image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}/standard-ai:latest
          docker push $IMAGE_NAME

  deploy:
    name: Deploy to Server
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    env:
      # 운영 환경 설정
      LOG_LEVEL: INFO
      DEBUG: "false"
      OPENAI_API_KEY: ${{ secrets.PROD_OPENAI_API_KEY }}
      GOOGLE_SERVICE_ACCOUNT_PATH: ${{ secrets.PROD_GOOGLE_SERVICE_ACCOUNT_PATH }}
      GOOGLE_SHEET_KEY: ${{ secrets.PROD_GOOGLE_SHEET_KEY }}
      SLACK_WEBHOOK_URL: ${{ secrets.PROD_SLACK_WEBHOOK_URL }}
    steps:
      - name: Trigger Deployment Script
        run: |
          # 운영 환경 배포 예시:
          # 1. SSH로 원격 서버 접속
          # ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_SERVER_SSH }} \
          #   "cd /opt/standard-ai && \
          #    docker pull ghcr.io/${{ github.repository }}/standard-ai:latest && \
          #    docker-compose up -d"
          
          # 2. 클라우드 배포 (예: AWS ECS)
          # aws ecs update-service --cluster prod --service standard-ai --force-new-deployment
          
          echo "운영 환경 배포 스크립트를 구체적으로 작성하세요."
